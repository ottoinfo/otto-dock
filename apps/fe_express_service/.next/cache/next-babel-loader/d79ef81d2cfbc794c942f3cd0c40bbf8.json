{"ast":null,"code":"var _jsxFileName = \"/data/src/pages/_app.js\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from \"react\";\nimport App from \"next/app\";\nimport { Provider } from \"react-redux\";\nimport Head from \"next/head\";\nexport default class extends App {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      errorEventId: null,\n      statusCode: null\n    };\n  }\n\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    try {\n      let pageProps = {};\n\n      if (Component.getInitialProps) {\n        pageProps = await Component.getInitialProps(ctx);\n      }\n\n      return {\n        pageProps\n      };\n    } catch (error) {\n      // Capture errors that happen during a page's getInitialProps.\n      // This will work on both client and server sides.\n      return {\n        hasError: true,\n        errorEventId,\n        statusCode: ctx.isServer ? \"500\" : false,\n        pageProps: {\n          dataLayer: {\n            pagetype: \"error\",\n            errortype: errorEventId\n          },\n          props: {},\n          store: {}\n        }\n      };\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    // If there was an error generated within getInitialProps, and we haven't\n    // yet seen an error, we add it to this.state here\n    return {\n      hasError: props.hasError || state.hasError || false,\n      errorEventId: props.errorEventId || state.errorEventId || undefined,\n      statusCode: props.statusCode || state.statusCode || undefined\n    };\n  }\n\n  static getDerivedStateFromError() {\n    // React Error Boundary here allows us to set state flagging the error (and\n    // later render a fallback UI).\n    return {\n      hasError: true\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      errorEventId\n    });\n  }\n\n  render() {\n    const {\n      hasError,\n      errorEventId,\n      statusCode\n    } = this.state;\n\n    if (!hasError) {\n      // Render the normal Next.js page\n      return super.render();\n    } // Render Custom Error Page\n    // to leverage the existing ERROR App we have to create a REDUX Store\n    // and used outside of NEXT.JS Framework ( infinite loop in NEXT )\n\n\n    return __jsx(Provider, {\n      store: createStore({}),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, __jsx(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, __jsx(Head, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, __jsx(\"title\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Error\")), __jsx(Theme, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, __jsx(Error, {\n      message: \"Oops! An error occured on this page.\",\n      errorEventId: errorEventId,\n      statusCode: statusCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/data/src/pages/_app.js"],"names":["React","Fragment","App","Provider","Head","constructor","props","state","hasError","errorEventId","statusCode","getInitialProps","Component","ctx","pageProps","error","isServer","dataLayer","pagetype","errortype","store","getDerivedStateFromProps","undefined","getDerivedStateFromError","componentDidCatch","errorInfo","setState","render","createStore"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React, { Fragment } from \"react\";\nimport App from \"next/app\";\nimport { Provider } from \"react-redux\";\nimport Head from \"next/head\";\n\nexport default class extends App {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      errorEventId: null,\n      statusCode: null\n    };\n  }\n\n  static async getInitialProps({ Component, ctx }: Object) {\n    try {\n      let pageProps = {};\n\n      if (Component.getInitialProps) {\n        pageProps = await Component.getInitialProps(ctx);\n      }\n\n      return { pageProps };\n    } catch (error) {\n      // Capture errors that happen during a page's getInitialProps.\n      // This will work on both client and server sides.\n      return {\n        hasError: true,\n        errorEventId,\n        statusCode: ctx.isServer ? \"500\" : false,\n        pageProps: {\n          dataLayer: {\n            pagetype: \"error\",\n            errortype: errorEventId\n          },\n          props: {},\n          store: {}\n        }\n      };\n    }\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    // If there was an error generated within getInitialProps, and we haven't\n    // yet seen an error, we add it to this.state here\n    return {\n      hasError: props.hasError || state.hasError || false,\n      errorEventId: props.errorEventId || state.errorEventId || undefined,\n      statusCode: props.statusCode || state.statusCode || undefined\n    };\n  }\n\n  static getDerivedStateFromError() {\n    // React Error Boundary here allows us to set state flagging the error (and\n    // later render a fallback UI).\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Object, errorInfo: Object) {\n    this.setState({ errorEventId });\n  }\n\n  render() {\n    const { hasError, errorEventId, statusCode } = this.state;\n    if (!hasError) {\n      // Render the normal Next.js page\n      return super.render();\n    }\n    // Render Custom Error Page\n    // to leverage the existing ERROR App we have to create a REDUX Store\n    // and used outside of NEXT.JS Framework ( infinite loop in NEXT )\n    return (\n      <Provider store={createStore({})}>\n        <Fragment>\n          <Head>\n            <title>Error</title>\n          </Head>\n\n          <Theme>\n            <Error\n              message=\"Oops! An error occured on this page.\"\n              errorEventId={errorEventId}\n              statusCode={statusCode}\n            />\n          </Theme>\n        </Fragment>\n      </Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}